{"version":3,"sources":["ui-component/extended/Avatar.js","views/dashboard/Default/index.js"],"names":["useStyles","makeStyles","theme","primaryBackground","background","palette","primary","main","color","paper","secondaryBackground","secondary","errorBackground","error","warningBackground","warning","dark","infoBackground","info","successBackground","success","greyBackground","grey","primaryOutline","border","secondaryOutline","errorOutline","warningOutline","infoOutline","successOutline","greyOutline","badge","width","spacing","height","xs","sm","md","lg","xl","Avatar","className","outline","size","others","classes","avatarClass","outlineColor","join","card","overflow","position","textAlign","content","padding","avatar","typography","commonAvatar","largeAvatar","backgroundColor","marginTop","avatarRight","mediumAvatar","zIndex","cardHeading","fontSize","fontWeight","marginRight","marginBottom","subHeading","avatarCircle","cursor","smallAvatar","circleIcon","transform","menuItem","tronWeb","TronWeb","fullHost","privateKey","tronGrid","TronGrid","console","log","Dashboard","useState","isLoading","setLoading","isAddress","setIsAddress","isTransaction","setIsTransaction","isBlock","setIsBlock","React","count","setCount","account","setAccount","tx","txID","ret","transaction","setTransaction","blockID","block_header","raw_data","number","transactions","block","setBlock","getTransaction","a","transactionInfo","trx","getTransactionInfo","warn","getAccount","addr","accountData","getAccountResources","accountResources","accountJSONData","timeDifference","date","now","moment","Date","end","duration","diff","humanize","useEffect","getCurrentBlock","then","result","getBlockTransactionCount","catch","err","container","gridSpacing","item","contentClass","style","onChange","data","str","Number","isNaN","parseFloat","getBlock","getTransactionFromBlock","margin","label","component","href","onClick","variant","clickable","loading","loadingIndicator","parentHash","timestamp","contractRet","blockNumber","contract","parameter","value","owner_address","to_address","amount","receipt","net_usage","balance","create_time"],"mappings":"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","file":"static/js/7.7270d27c.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport MuiAvatar from '@material-ui/core/Avatar';\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    primaryBackground: {\r\n        background: theme.palette.primary.main,\r\n        color: theme.palette.background.paper\r\n    },\r\n    secondaryBackground: {\r\n        background: theme.palette.secondary.main,\r\n        color: theme.palette.background.paper\r\n    },\r\n    errorBackground: {\r\n        background: theme.palette.error.main,\r\n        color: theme.palette.background.paper\r\n    },\r\n    warningBackground: {\r\n        background: theme.palette.warning.dark,\r\n        color: theme.palette.background.paper\r\n    },\r\n    infoBackground: {\r\n        background: theme.palette.info.main,\r\n        color: theme.palette.background.paper\r\n    },\r\n    successBackground: {\r\n        background: theme.palette.success.dark,\r\n        color: theme.palette.background.paper\r\n    },\r\n    greyBackground: {\r\n        background: theme.palette.grey[500],\r\n        color: theme.palette.background.paper\r\n    },\r\n    primaryOutline: {\r\n        background: theme.palette.background.paper,\r\n        color: theme.palette.primary.main,\r\n        border: `2px solid ${theme.palette.primary.main}`\r\n    },\r\n    secondaryOutline: {\r\n        background: theme.palette.background.paper,\r\n        color: theme.palette.secondary.main,\r\n        border: `2px solid ${theme.palette.secondary.main}`\r\n    },\r\n    errorOutline: {\r\n        background: theme.palette.background.paper,\r\n        color: theme.palette.error.main,\r\n        border: `2px solid ${theme.palette.error.main}`\r\n    },\r\n    warningOutline: {\r\n        background: theme.palette.background.paper,\r\n        color: theme.palette.warning.dark,\r\n        border: `2px solid ${theme.palette.warning.dark}`\r\n    },\r\n    infoOutline: {\r\n        background: theme.palette.background.paper,\r\n        color: theme.palette.info.main,\r\n        border: `2px solid ${theme.palette.info.main}`\r\n    },\r\n    successOutline: {\r\n        background: theme.palette.background.paper,\r\n        color: theme.palette.success.dark,\r\n        border: `2px solid ${theme.palette.success.dark}`\r\n    },\r\n    greyOutline: {\r\n        background: theme.palette.background.paper,\r\n        color: theme.palette.grey[500],\r\n        border: `2px solid ${theme.palette.grey[500]}`\r\n    },\r\n    badge: {\r\n        width: theme.spacing(3.5),\r\n        height: theme.spacing(3.5)\r\n    },\r\n    xs: {\r\n        width: theme.spacing(4.25),\r\n        height: theme.spacing(4.25)\r\n    },\r\n    sm: {\r\n        width: theme.spacing(5),\r\n        height: theme.spacing(5)\r\n    },\r\n    md: {\r\n        width: theme.spacing(7),\r\n        height: theme.spacing(7)\r\n    },\r\n    lg: {\r\n        width: theme.spacing(9),\r\n        height: theme.spacing(9)\r\n    },\r\n    xl: {\r\n        width: theme.spacing(10.25),\r\n        height: theme.spacing(10.25)\r\n    }\r\n}));\r\n\r\n// ===========================|| AVATAR ||=========================== //\r\n\r\nconst Avatar = ({ className, color, outline, size, ...others }) => {\r\n    const classes = useStyles();\r\n    let avatarClass = [];\r\n\r\n    const outlineColor = outline ? [classes[`${color}Outline`], ...avatarClass] : [classes[`${color}Background`], ...avatarClass];\r\n\r\n    avatarClass = color ? outlineColor : avatarClass;\r\n    avatarClass = size ? [classes[size], ...avatarClass] : avatarClass;\r\n    if (className) {\r\n        avatarClass = className ? [...avatarClass, className] : avatarClass;\r\n    }\r\n\r\n    return <MuiAvatar className={avatarClass.join(' ')} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    className: PropTypes.string,\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string\r\n};\r\n\r\nexport default Avatar;\r\n","import React, { useEffect, useState } from 'react';\n\n// material-ui\nimport { Chip, Grid } from '@material-ui/core';\n\n// project imports\nimport { gridSpacing } from 'store/constant';\nimport SearchSection from 'layout/MainLayout/Header/SearchSection';\nimport MainCard from 'ui-component/cards/MainCard';\nimport { makeStyles } from '@material-ui/styles';\nimport Avatar from 'ui-component/extended/Avatar';\nimport TronGrid from 'trongrid';\nimport TronWeb from 'tronweb';\nimport moment from 'moment';\nimport { LoadingButton } from '@material-ui/lab';\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        color: '#fff',\n        overflow: 'hidden',\n        position: 'relative',\n        textAlign: 'center'\n    },\n    content: {\n        padding: '20px !important'\n    },\n    avatar: {\n        ...theme.typography.commonAvatar,\n        ...theme.typography.largeAvatar,\n        backgroundColor: theme.palette.secondary[800],\n        marginTop: '8px'\n    },\n    avatarRight: {\n        ...theme.typography.commonAvatar,\n        ...theme.typography.mediumAvatar,\n        backgroundColor: theme.palette.secondary.dark,\n        color: theme.palette.secondary[200],\n        zIndex: 1\n    },\n    cardHeading: {\n        fontSize: '2.125rem',\n        fontWeight: 500,\n        marginRight: '8px',\n        marginTop: '14px',\n        marginBottom: '6px'\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 500,\n        color: theme.palette.secondary[200]\n    },\n    avatarCircle: {\n        cursor: 'pointer',\n        ...theme.typography.smallAvatar,\n        backgroundColor: theme.palette.secondary[200],\n        color: theme.palette.secondary.dark\n    },\n    circleIcon: {\n        transform: 'rotate3d(1, 1, 1, 45deg)'\n    },\n    menuItem: {\n        marginRight: '14px',\n        fontSize: '1.25rem'\n    }\n}));\n\nconst tronWeb = new TronWeb({\n    fullHost: 'http://34.194.89.253:9090',\n    privateKey: `9ad4f52a33a632de62c6cde0b6f33cdfd72099457c6fcb1bf4968056e968a3f6`\n});\n\nconst tronGrid = new TronGrid(tronWeb);\n\nconsole.log(tronWeb);\nconsole.log(tronGrid);\n\nconst address = 'TB867arfyYtqoSLv9hUEDFgfehv4uvpU5k';\n\n// ===========================|| DEFAULT DASHBOARD ||=========================== //\n\nconst Dashboard = () => {\n    const classes = useStyles();\n    const [isLoading, setLoading] = useState(true);\n    const [isAddress, setIsAddress] = useState(false);\n    const [isTransaction, setIsTransaction] = useState(false);\n    const [isBlock, setIsBlock] = useState(false);\n    const [count, setCount] = React.useState(0);\n    const [account, setAccount] = React.useState({});\n    const [transaction, setTransaction] = React.useState({\n        tx: {\n            txID: ''\n        },\n        info: {\n            ret: []\n        }\n    });\n    const [block, setBlock] = React.useState({\n        blockID: '',\n        block_header: {\n            raw_data: {\n                number: 0\n            }\n        },\n        transactions: []\n    });\n\n    const getTransaction = async (tx) => {\n        console.log('tx');\n        console.log(tx);\n        setLoading(true);\n        try {\n            const transactionInfo = {};\n            transactionInfo.tx = await tronWeb.trx.getTransaction(tx);\n            transactionInfo.info = await tronWeb.trx.getTransactionInfo(tx);\n            setTransaction(transactionInfo);\n            console.log('setIsTransaction');\n            console.warn(transactionInfo);\n            setIsTransaction(true);\n            setIsAddress(false);\n            setIsBlock(false);\n            setLoading(false);\n        } catch (error) {\n            console.log(error);\n            setLoading(false);\n        }\n    };\n\n    const getAccount = async (addr) => {\n        const accountData = await tronWeb.trx.getAccount(addr);\n        const accountResources = await tronWeb.trx.getAccountResources(addr);\n        console.log(accountData);\n        console.log(accountResources);\n        const accountJSONData = {};\n        accountJSONData.accountData = accountData;\n        accountJSONData.accountResources = accountResources;\n        console.log('accountJSONData');\n        console.log(accountJSONData);\n        setAccount(accountJSONData);\n        setIsTransaction(false);\n        setIsAddress(true);\n        setIsBlock(false);\n        setLoading(false);\n    };\n\n    const sendTrx = () => {\n        tronWeb.trx\n            .sendTrx('TF1KcmetvbznYDZu8A3EfxNFAdvJg6oaZU', 1000)\n            .then((result) => {\n                console.log('sendTrx');\n                console.warn(result);\n                // getTransaction(result.transaction.txID);\n                // getTransaction('b9120777763f8fe80e7f38097e208d8aa7ae9b33e64ef87e9fd4af238ff2c667');\n            })\n            .catch((result) => console.warn(result));\n    };\n\n    const getBlockTransactionCount = (tx) => {\n        console.log(tx);\n        tronWeb.trx.getBlockTransactionCount(tx.block_header.raw_data.number).then((result) => {\n            console.log('setCount');\n            console.log(result);\n            setCount(result);\n        });\n    };\n\n    const fetchBlock = () => {\n        console.log(block);\n        setLoading(true);\n\n        // getAccount();\n        // getTransaction('b9120777763f8fe80e7f38097e208d8aa7ae9b33e64ef87e9fd4af238ff2c667');\n        // tronWeb.trx.getBlock(block.block_header.raw_data.number).then((result) => {\n        tronWeb.trx\n            .getBlock(block.block_header.raw_data.number)\n            // .getBlock(8197)\n            .then((result) => {\n                console.log('getBlock');\n                console.log(result);\n                setIsTransaction(false);\n                setIsAddress(false);\n                setIsBlock(true);\n                setLoading(false);\n            })\n            .catch((err) => {\n                console.log(err);\n                setLoading(false);\n            });\n        tronWeb.trx\n            .getTransactionFromBlock(block.block_header.raw_data.number)\n            .then((result) => {\n                console.log('getTransactionFromBlock');\n                console.log(result);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n\n    const timeDifference = (date) => {\n        const now = moment(new Date());\n        const end = moment(date);\n        const duration = moment.duration(now.diff(end));\n        return duration.humanize();\n    };\n\n    const isNumeric = (str) => {\n        if (typeof str !== 'string') return false;\n        return !Number.isNaN(str) && !Number.isNaN(parseFloat(str));\n    };\n\n    const onSearch = (data) => {\n        console.log(data);\n        console.log(typeof data);\n        if (tronWeb.isAddress(data)) {\n            setLoading(true);\n            getAccount(data);\n        } else if (isNumeric(data)) {\n            setLoading(true);\n            tronWeb.trx\n                .getBlock(data)\n                .then((result) => {\n                    console.log('getBlock');\n                    console.log(result);\n                    setIsTransaction(false);\n                    setIsAddress(false);\n                    setIsBlock(true);\n                    setLoading(false);\n                    setBlock(result);\n                })\n                .catch((err) => {\n                    console.log(err);\n                    setLoading(false);\n                });\n            tronWeb.trx\n                .getTransactionFromBlock(data)\n                .then((result) => {\n                    console.log('getTransactionFromBlock');\n                    console.log(result);\n                })\n                .catch((err) => {\n                    console.log(err);\n                });\n        } else {\n            getTransaction(data);\n        }\n    };\n\n    useEffect(() => {\n        setLoading(false);\n        tronWeb.trx\n            .getCurrentBlock()\n            // .getBlock(8197)\n            .then((result) => {\n                console.log('setBlock');\n                console.log(result);\n                console.warn(result.blockID);\n                setBlock(result);\n                console.log(block);\n                getBlockTransactionCount(block);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        console.log(isLoading);\n        console.log(tronWeb.isAddress(address));\n    }, []);\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item lg={12} md={12} sm={12} xs={12}>\n                <Grid container spacing={gridSpacing}>\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\n                        <MainCard className={classes.card} contentClass={classes.content}>\n                            <h1 style={{ color: 'black' }}>IdeaChain Block Explorer</h1>\n                            <SearchSection onChange={onSearch} theme=\"light\" />\n                            <span style={{ color: 'gray', margin: 10 }}>LATEST BLOCK</span>\n                            <Chip\n                                style={{ color: 'gray', margin: 10 }}\n                                avatar={<Avatar>#</Avatar>}\n                                label={block.block_header.raw_data.number}\n                                component=\"a\"\n                                href={`/#/block/${block.block_header.raw_data.number}`}\n                                onClick={fetchBlock}\n                                variant=\"filled\"\n                                clickable\n                            />\n                            <span style={{ color: 'gray', margin: 10 }}>TRANSACTIONS</span>\n                            <Chip style={{ color: 'gray', margin: 10 }} label={count} component=\"a\" href=\"#basic-chip\" variant=\"filled\" />\n                        </MainCard>\n                        {isLoading ? (\n                            <MainCard style={{ marginTop: 20, textAlign: 'center' }}>\n                                <LoadingButton loading loadingIndicator=\"Loading...\" variant=\"outlined\">\n                                    Loading..\n                                </LoadingButton>\n                            </MainCard>\n                        ) : null}\n                        {isBlock ? (\n                            <MainCard style={{ marginTop: 20 }}>\n                                <h4>Block Details</h4>\n                                <Grid container spacing={2}>\n                                    {\n                                        // block.transactions.map((b) => { console.log(b); return null;})\n                                    }\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>Block Number</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>{block.block_header.raw_data.number}</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>Block Hash</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>{block.block_header.raw_data.parentHash}</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>Block Time</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>{timeDifference(block.block_header.raw_data.timestamp)} ago</span>\n                                    </Grid>\n                                </Grid>\n                            </MainCard>\n                        ) : null}\n                        {isTransaction ? (\n                            <MainCard style={{ marginTop: 20 }}>\n                                <h4>Transaction Details</h4>\n                                <Grid container spacing={2}>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>Transaction ID</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>{transaction.tx.txID}</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>Result</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>{transaction.tx.ret[0].contractRet}</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>Block</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>#{transaction.info.blockNumber}</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>Time</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>{timeDifference(transaction.tx.raw_data.timestamp)}</span>\n                                    </Grid>\n                                    <Grid item lg={12} md={12} sm={12} xs={12}>\n                                        <h5>Transfer TRX</h5>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>From</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>{transaction.tx.raw_data.contract[0].parameter.value.owner_address}</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>To</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>{transaction.tx.raw_data.contract[0].parameter.value.to_address}</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>Amount</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>{transaction.tx.raw_data.contract[0].parameter.value.amount}</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>Consume Bandwidth</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>{transaction.info.receipt.net_usage} Bandwidth</span>\n                                    </Grid>\n                                </Grid>\n                            </MainCard>\n                        ) : null}\n                        {isAddress ? (\n                            <MainCard style={{ marginTop: 20 }}>\n                                <h4>Account Details</h4>\n                                <Grid container spacing={2}>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>TRX Balance</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>{account.accountData.balance / 1000000}</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>Created</span>\n                                    </Grid>\n                                    <Grid item lg={6} md={6} sm={6} xs={12}>\n                                        <span>{timeDifference(account.accountData.create_time)} ago</span>\n                                    </Grid>\n                                </Grid>\n                            </MainCard>\n                        ) : null}\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Dashboard;\n"],"sourceRoot":""}